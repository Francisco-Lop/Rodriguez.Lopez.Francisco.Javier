/* This is auto-generated C code from LDmicro. Do not edit this file! Go
   back to the LDmicro ladder diagram source for changes in the ladder logic, and make
   any C additions either in ladder.h or in additional .c or .h files linked
   against this one. */

/* You must provide ladder.h; there you must provide:
   a typedef for SWORD and ldBOOL, signed 16 bit and boolean types
   (probably typedef signed short SWORD; typedef unsigned char bool;)

   You must also provide implementations of all the I/O read/write
   either as inlines in the header file or in another source file. (The
   I/O functions are all declared extern.)

   See the generated source code (below) for function names. */

#include "ladder.h"
#include "programaacion ladder.h" // Copy this line into main project file where is function main().

/* Define EXTERN_EVERYTHING in ladder.h if you want all symbols extern.
   This could be useful to implement `magic variables,' so that for
   example when you write to the ladder variable duty_cycle, your PLC
   runtime can look at the C variable U_duty_cycle and use that to set
   the PWM duty cycle on the micro. That way you can add support for
   peripherals that LDmicro doesn't know about. */
#ifdef EXTERN_EVERYTHING
  #define STATIC
#else
  #define STATIC static
#endif

/* Ux_xxx symbols correspond to user-defined names. There is such a symbol
   for every internal relay, variable, timer, and so on in the ladder
   program. Ix_xxx symbols are internally generated. */
/* Ix_xxx
   Ux_xxx
    ^
    b means bool type
    i means int type */

STATIC ldBOOL Ib_rung_top = 0;
#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_Xswitch1(void) {
    return digitalRead(pin_Ub_Xswitch1);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide these functions.
  ldBOOL Read_Ub_Ytenue1(void) {
    return digitalRead(pin_Ub_Ytenue1);
  }
  void Write_Ub_Ytenue1(ldBOOL b) {
    digitalWrite(pin_Ub_Ytenue1,b);
  }
  void Write1_Ub_Ytenue1(void) {
    digitalWrite(pin_Ub_Ytenue1,HIGH);
  }
  void Write0_Ub_Ytenue1(void) {
    digitalWrite(pin_Ub_Ytenue1,LOW);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_Xswitch3(void) {
    return digitalRead(pin_Ub_Xswitch3);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide these functions.
  ldBOOL Read_Ub_Ytenue2(void) {
    return digitalRead(pin_Ub_Ytenue2);
  }
  void Write_Ub_Ytenue2(ldBOOL b) {
    digitalWrite(pin_Ub_Ytenue2,b);
  }
  void Write1_Ub_Ytenue2(void) {
    digitalWrite(pin_Ub_Ytenue2,HIGH);
  }
  void Write0_Ub_Ytenue2(void) {
    digitalWrite(pin_Ub_Ytenue2,LOW);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_Xswitch2(void) {
    return digitalRead(pin_Ub_Xswitch2);
  }
#endif


/* Call this function once per PLC cycle. You are responsible for calling
   it at the interval that you specified in the LDmicro MCU configuration when you
   generated this code. */
void PlcCycle(void) {
                    
    // ======= START RUNG 1 =======
    LabelRung1:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_Xswitch1()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    Write_Ub_Ytenue1(Read_Ib_rung_top());
    // ] finish series
    
    // ======= START RUNG 2 =======
    LabelRung2:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_Xswitch3()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    Write_Ub_Ytenue2(Read_Ib_rung_top());
    // ] finish series
    
    // ======= START RUNG 3 =======
    LabelRung3:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_Xswitch2()) {
        Write_Ib_rung_top(0);
    }
    // ] finish series
    LabelRung4:;
    // Latest INT_OP here
}

// PLC Cycle timing function.
boolean IsPlcInterval() {
    static unsigned long last_run;
    unsigned long micros_now = micros();
    if (micros_now - last_run >= PLC_INTERVAL) {
        last_run = micros_now;
        return true;
    }
    return false;
}

// Call loopPlc() function in loop() of your arduino project once.
void loopPlc() {
    if (IsPlcInterval()) {
        #ifdef USE_WDT
        wdt_reset();
        #endif
        PlcCycle();
    }
}

// Call setupPlc() function in setup() function of your arduino project once.
void setupPlc(void) {
   #ifdef USE_WDT
   wdt_enable(WDTO_2S);
   #endif
// Initialize PLC cycle timer here if you need.
// ...

// Set up analog reference type
    analogReference(analogReference_type);

// Set up I/O pins
    pinMode(pin_Ub_Xswitch1, INPUT_PULLUP);
    pinMode(pin_Ub_Xswitch2, INPUT_PULLUP);
    pinMode(pin_Ub_Xswitch3, INPUT_PULLUP);
    pinMode(pin_Ub_Ytenue1, OUTPUT);
    pinMode(pin_Ub_Ytenue2, OUTPUT);
}
